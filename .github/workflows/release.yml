name: 🚀 Multi-Platform Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  # 1️⃣ Draft the Release
  create-release:
    runs-on: ubuntu-22.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4

      - name: Create Release Draft
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: true
          token: ${{ secrets.GITHUB_TOKEN }}

  # 2️⃣ Build & package on Linux, Windows, macOS
  build-packages:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: linux
            runs-on: ubuntu-18.04
          - os: windows
            runs-on: windows-latest
          - os: macos
            runs-on: macos-12

    runs-on: ${{ matrix['runs-on'] }}

    steps:
      - uses: actions/checkout@v4

      # 2.a) Python on every runner
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # 2.b) Install your requirements + PyInstaller on Win/mac
      - name: Install Python deps
        if: matrix.os != 'linux'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller

      #### Linux (Ubuntu 18.04 / glibc 2.27) ─────────────────
      - name: Build & package Linux in Docker
        if: matrix.os == 'linux'
        uses: docker/setup-buildx-action@v3

      - name: Build & package Linux
        if: matrix.os == 'linux'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .github/Dockerfile
          platforms: linux/amd64
          push: false
          outputs: type=local,dest=dist
          build-args: |
            APP_VERSION=${{ github.ref_name }}

      - name: Upload Linux artifacts
        if: matrix.os == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: xtend-linux
          path: dist/*

      #### Windows (windows-latest) ─────────────────────────
      - name: Install Windows tools
        if: matrix.os == 'windows'
        run: choco install wixtoolset upx -y

      - name: Build Windows EXE & MSI
        if: matrix.os == 'windows'
        shell: pwsh
        run: |
          # 1. Set paths
          $WIXPATH = "${env:ProgramFiles(x86)}\WiX Toolset v3.14\bin"
          $UPGRADE_CODE_FILE = "windows\.upgradecode"  # Changed path

          # 2. Verify/create upgradecode file
          if (-not (Test-Path $UPGRADE_CODE_FILE)) {
              New-Item -Path $UPGRADE_CODE_FILE -Force
              [guid]::NewGuid().ToString() | Out-File $UPGRADE_CODE_FILE
          }
          $UPGRADE_CODE = Get-Content $UPGRADE_CODE_FILE

          # 3. Use pre-installed WiX
          if (-not (Test-Path "$WIXPATH\candle.exe")) {
              Write-Error "WiX not found at $WIXPATH"
              exit 1
          }
          $env:PATH = "$WIXPATH;$env:PATH"

          # 4. Process WXS template
          (Get-Content windows\xtend.wxs) `
            -replace 'UPGRADE_CODE_GUID', $UPGRADE_CODE `
            -replace 'COMPONENT_GUID', ([guid]::NewGuid().ToString()) |
            Set-Content windows\xtend-autogen.wxs

          # 5. Build and package
          pyinstaller --onefile --name xtend src\xtend\cli.py
          upx --best --lzma --force dist\xtend.exe

          candle.exe -arch x64 -dVersion="${{ github.ref_name }}" windows\xtend-autogen.wxs -out dist\xtend.wixobj
          light.exe -ext WixUIExtension -sw1076 -sw1079 -out dist\xtend-${{ github.ref_name }}.msi dist\xtend.wixobj

      #### macOS (macos-12) ────────────────────────────────
      - name: Install macOS tools
        if: matrix.os == 'macos'
        run: brew install upx create-dmg

      - name: Build macOS .app and compress
        if: matrix.os == 'macos'
        run: |
          pyinstaller --clean --onefile --windowed --name xtend src/xtend/cli.py \
            --add-data "src/xtend/static:static" \
            --add-data "src/xtend/templates:templates" \
            --exclude-module PyQt5.QtWebEngine

          # UPX the internal Mach-O
          upx --best dist/xtend.app/Contents/MacOS/xtend

      - name: Create macOS DMG
        if: matrix.os == 'macos'
        run: |
          create-dmg \
            --volname "Xtend" \
            --overwrite \
            dist/xtend.app \
            dist/xtend-${{ github.ref_name }}.dmg

      - name: Create macOS PKG
        if: matrix.os == 'macos'
        run: |
          pkgbuild \
            --root dist/xtend.app \
            --identifier com.yourcompany.xtend \
            --install-location /Applications \
            dist/xtend-${{ github.ref_name }}.pkg

      - name: Upload macOS artifacts
        if: matrix.os == 'macos'
        uses: actions/upload-artifact@v4
        with:
          name: xtend-macos
          path: |
            dist/*.dmg
            dist/*.pkg

  # 3️⃣ Push assets into the GitHub Release draft
  publish:
    needs: build-packages
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Publish Release Assets
        uses: softprops/action-gh-release@v2
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          files: |
            dist/*.AppImage
            dist/*.deb
            dist/*.exe
            dist/*.msi
            dist/*.dmg
            dist/*.pkg
            dist/xtend*
          token: ${{ secrets.GITHUB_TOKEN }}
