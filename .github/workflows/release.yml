name: Release
permissions:
  contents: write

on:
  push:
    tags:
      - "v*"

jobs:
  build_linux:
    name: Build Linux executables
    runs-on: ubuntu-22.04
    env:
      VERSION: ${{ github.ref_name }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install Linux build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            patchelf build-essential libfuse2 imagemagick \
            wmctrl x11-utils libxcomposite1 libxrender1 libgl1-mesa-glx libdrm2 \
            qtbase5-dev qt5-qmake qtwebengine5-dev \
            llvm-dev libclang-dev clang pkg-config libopencv-dev

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install pyinstaller

      # - name: Set up Rust
      #   uses: actions-rs/toolchain@v1
      #   with:
      #     toolchain: stable
      #     override: true

      # - name: Cache Rust dependencies
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.cargo/registry
      #       ~/.cargo/git
      #       target
      #     key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-cargo-

      # - name: Build Rust shared library
      #   run: |
      #     cd app_capturer
      #     cargo build --release -p app_lib
      #     cd ..

      - name: Build with PyInstaller (bundle all deps)
        run: |
          LIB_SO_PATH="$(pwd)/app_capturer/target/release/libapp_lib.so"
          pyinstaller --onedir --noupx \
            --name xtend --windowed \
            --icon src/xtend/resources/icon.png \
            --add-data "src/xtend/static:xtend/static" \
            --add-data "src/xtend/templates:xtend/templates" \
            --add-binary "$LIB_SO_PATH:." \
            --add-binary "/usr/lib/x86_64-linux-gnu/qt5/libexec/QtWebEngineProcess:." \
            --hidden-import PyQt5.QtWebEngineWidgets \
            --collect-all PyQt5 \
            --collect-all fastapi \
            --collect-all uvicorn \
            --collect-all starlette \
            --collect-all jinja2 \
            --collect-all aiofiles \
            --collect-all websockets \
            --collect-all python_multipart \
            src/xtend/cli.py

      - name: Prepare AppDir and AppRun
        run: |
          mkdir -p dist/xtend.AppDir/usr/{bin,share/applications,share/icons/hicolor/256x256/apps}
          cp -r dist/xtend/* dist/xtend.AppDir/usr/bin/
          cat > dist/xtend.AppDir/usr/share/applications/xtend.desktop <<EOF
          [Desktop Entry]
          Type=Application
          Name=Xtend
          Exec=xtend
          Icon=xtend
          Terminal=false
          Categories=Utility;
          EOF
          convert src/xtend/resources/icon.png -resize 256x256 dist/xtend.AppDir/usr/share/icons/hicolor/256x256/apps/xtend.png
          cat > dist/xtend.AppDir/AppRun <<'EOF'
          #!/bin/sh
          export QTWEBENGINE_CHROMIUM_FLAGS="--disable-gpu --disable-software-rasterizer"
          export QT_OPENGL="software"
          exec "$APPDIR/usr/bin/xtend" "$@"
          EOF
          chmod +x dist/xtend.AppDir/AppRun

      - name: Download linuxdeploy
        run: |
          wget -qO linuxdeploy-x86_64.AppImage https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage

      - name: Create AppImage
        run: |
          ./linuxdeploy-x86_64.AppImage \
            --appdir dist/xtend.AppDir \
            -d dist/xtend.AppDir/usr/share/applications/xtend.desktop \
            -i dist/xtend.AppDir/usr/share/icons/hicolor/256x256/apps/xtend.png \
            --output appimage
          mv Xtend*.AppImage xtend-${VERSION}-linux.AppImage

      - name: Compute .deb version
        run: echo "PKG_VERSION=${VERSION#v}" >> $GITHUB_ENV

      - name: Build .deb package
        run: |
          mkdir -p pkg/DEBIAN
          cat > pkg/DEBIAN/control <<EOF
          Package: xtend
          Version: ${PKG_VERSION}
          Section: utils
          Priority: optional
          Architecture: amd64
          Depends: python3, libxcb-xinerama0, libnss3, libgdk-pixbuf-2.0-0, libglu1-mesa, libpulse0, libegl1, libxi6, libxcomposite1, libxrandr2, libxtst6, libatk1.0-0, libpangocairo-1.0-0, libcairo2, libpango1.0-0, libgtk-3-0, libglib2.0-0, libgl1
          Maintainer: Your Name <you@example.com>
          Description: Xtend â€” a self-contained PyQt5 + FastAPI desktop app with Rust-powered screen capture
          EOF

          mkdir -p pkg/usr/{bin,share/applications,share/icons/hicolor/128x128/apps}
          cp -r dist/xtend/* pkg/usr/bin/
          cp dist/xtend.AppDir/usr/share/applications/xtend.desktop pkg/usr/share/applications/
          cp dist/xtend.AppDir/usr/share/icons/hicolor/256x256/apps/xtend.png pkg/usr/share/icons/hicolor/128x128/apps/xtend.png
          dpkg-deb --build pkg xtend-${VERSION}-linux.deb

      - name: Create tar.gz bundle
        run: tar czvf xtend-${VERSION}-linux.tar.gz -C dist xtend

      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux_release
          path: |
            xtend-${{ env.VERSION }}-linux.AppImage
            xtend-${{ env.VERSION }}-linux.deb
            xtend-${{ env.VERSION }}-linux.tar.gz

  create_release:
    runs-on: ubuntu-latest
    needs: [build_linux]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux_release
          path: .

      - name: Create Draft Release
        id: release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: true
          prerelease: false

      - name: Upload AppImage
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: xtend-${{ github.ref_name }}-linux.AppImage
          asset_name: xtend-${{ github.ref_name }}-linux.AppImage
          asset_content_type: application/octet-stream

      - name: Upload .deb
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: xtend-${{ github.ref_name }}-linux.deb
          asset_name: xtend-${{ github.ref_name }}-linux.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload tar.gz
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: xtend-${{ github.ref_name }}-linux.tar.gz
          asset_name: xtend-${{ github.ref_name }}-linux.tar.gz
          asset_content_type: application/tar+gzip
