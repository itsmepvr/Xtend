name: Release
permissions:
  contents: write # allow creating releases&#8203;:contentReference[oaicite:1]{index=1}
on:
  push:
    tags:
      - "v*" # triggers on new tag like v1.0.0&#8203;:contentReference[oaicite:2]{index=2}

jobs:
  # **Linux Build Job** – builds AppImage, .deb, and tar.gz on Ubuntu 18.04 (glibc 2.27)
  build_linux:
    runs-on: ubuntu-18.04
    env:
      DISPLAY: :0 # required for PyQt5 GUI build (Xvfb can be used if needed)
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Linux build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pyqt5 python3-pip upx dpkg-dev fakeroot
          # Download AppImage tool for packaging
          wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool
          # (Optional) Install patchelf if needed to adjust binary rpaths
      - name: Install Python requirements
        run: |
          pip install --upgrade pip
          pip install pyinstaller==5.* PyQt5  # PyInstaller for bundling, PyQt5 for GUI

      - name: Extract version
        id: get_version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      - name: Build Linux executable with PyInstaller
        run: |
          pyinstaller --onefile --windowed --name xtend \
            --icon assets/icon.png xtend/main.py
          # PyInstaller generates `dist/xtend` (one-file ELF binary)
      - name: Compress binary with UPX
        run: upx -9 dist/xtend # compress the binary to reduce size

      - name: Package Linux artifacts (AppImage, .deb, tar.gz)
        run: |
          # Create AppImage (portable self-mounting image)
          mkdir -p AppDir/usr/bin AppDir/usr/share/applications AppDir/usr/share/icons/hicolor/256x256/apps
          cp dist/xtend AppDir/usr/bin/xtend
          ln -s usr/bin/xtend AppDir/AppRun  # AppRun entrypoint
          # Write desktop entry for AppImage integration
          cat > AppDir/usr/share/applications/xtend.desktop <<'EOF'
          [Desktop Entry]
          Type=Application
          Name=Xtend
          Comment=Extend any device with a web browser into a secondary screen for your computer.
          Exec=xtend
          Icon=xtend
          Terminal=false
          Categories=Utility;
          EOF
          # Add icon for AppImage (name without extension matches .desktop Icon field)&#8203;:contentReference[oaicite:3]{index=3}
          cp assets/icon.png AppDir/usr/share/icons/hicolor/256x256/apps/xtend.png
          # Build the AppImage using appimagetool
          ./appimagetool AppDir "xtend-${VERSION}-linux.AppImage"
          # Package .tar.gz of the binary
          tar -czf "xtend-${VERSION}-linux.tar.gz" -C dist xtend
          # Create .deb package structure
          mkdir -p pkg/DEBIAN pkg/usr/bin pkg/usr/share/applications pkg/usr/share/icons/hicolor/256x256/apps
          cp dist/xtend pkg/usr/bin/xtend
          cp AppDir/usr/share/applications/xtend.desktop pkg/usr/share/applications/xtend.desktop
          cp AppDir/usr/share/icons/hicolor/256x256/apps/xtend.png pkg/usr/share/icons/hicolor/256x256/apps/xtend.png
          # Create DEBIAN control file for .deb
          echo "Package: xtend" > pkg/DEBIAN/control
          echo "Version: ${VERSION}" >> pkg/DEBIAN/control
          echo "Section: utils" >> pkg/DEBIAN/control
          echo "Priority: optional" >> pkg/DEBIAN/control
          echo "Architecture: amd64" >> pkg/DEBIAN/control
          echo "Maintainer: Your Name <you@example.com>" >> pkg/DEBIAN/control
          echo "Description: Extend any device with a web browser into a secondary screen for your computer." >> pkg/DEBIAN/control
          dpkg-deb --build pkg "xtend-${VERSION}-linux.deb"

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux_artifacts
          path: |
            xtend-${{ env.VERSION }}-linux.AppImage
            xtend-${{ env.VERSION }}-linux.tar.gz
            xtend-${{ env.VERSION }}-linux.deb

  # **Windows Build Job** – builds one-file exe and NSIS installer on Windows
  build_windows:
    runs-on: windows-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Windows build dependencies
        shell: powershell
        run: |
          choco install -y nsis upx
          python -m pip install --upgrade pip
          pip install pyinstaller==5.* PyQt5

      - name: Extract version
        shell: bash # use Git Bash on Windows for parameter expansion
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Build Windows executable with PyInstaller
        shell: cmd
        run: |
          pyinstaller --onefile --windowed --name xtend ^
            --icon assets\\icon.ico xtend\\main.py
          REM PyInstaller creates dist\\xtend.exe

      - name: Compress executable with UPX
        shell: cmd
        run: upx -9 dist\\xtend.exe

      - name: Generate NSIS Installer
        shell: cmd
        run: |
          rem Compile NSIS script to create installer
          makensis /DVERSION=%VERSION% installer\\xtend.nsi
          rem NSIS outputs xtend-%VERSION%-windows-installer.exe as defined in script

      - name: Rename artifacts with version
        shell: cmd
        run: |
          rename dist\\xtend.exe xtend-%VERSION%-windows.exe

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows_artifacts
          path: |
            xtend-${{ env.VERSION }}-windows.exe
            xtend-${{ env.VERSION }}-windows-installer.exe

  # **macOS Build Job** – builds .app bundle and .dmg on macOS 12 (Monterey)
  build_macos:
    runs-on: macos-12
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install macOS build dependencies
        run: |
          brew install upx
          pip3 install --upgrade pip
          pip3 install pyinstaller==5.* PyQt5

      - name: Extract version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Build macOS app with PyInstaller
        run: |
          pyinstaller --onefile --windowed --name Xtend \
            --icon assets/icon.png xtend/main.py
          # PyInstaller will produce dist/Xtend.app (one-folder bundle) 
          # and dist/Xtend (onefile CLI, not used since .app is preferred for GUI).
          # Ensure the .app bundle is built (PyInstaller on macOS creates a .app for windowed apps)

      - name: Compress macOS binary with UPX
        run: upx -9 dist/Xtend.app/Contents/MacOS/Xtend

      - name: Package macOS artifacts (.app and .dmg)
        run: |
          # Create a disk image (.dmg) for easy distribution
          hdiutil create -volname "Xtend" -srcfolder "dist/Xtend.app" -ov -format UDZO "xtend-${VERSION}-macos.dmg"
          # Also zip the .app bundle (GitHub requires a single file upload)
          ditto -c -k --sequesterRsrc --keepParent "dist/Xtend.app" "xtend-${VERSION}-macos.app.zip"

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v3
        with:
          name: macos_artifacts
          path: |
            xtend-${{ env.VERSION }}-macos.dmg
            xtend-${{ env.VERSION }}-macos.app.zip

  # **Release Job** – creates a draft GitHub Release and attaches all artifacts
  create_release:
    runs-on: ubuntu-latest
    needs: [build_linux, build_windows, build_macos]
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: linux_artifacts
      - uses: actions/download-artifact@v3
        with:
          name: windows_artifacts
      - uses: actions/download-artifact@v3
        with:
          name: macos_artifacts

      - name: Extract version (for release metadata)
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Create Draft Release
        id: release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }} # e.g. v1.0.0
          release_name: ${{ github.ref_name }} # e.g. v1.0.0
          draft: true # create as draft to review before publishing
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux AppImage
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: xtend-${{ env.VERSION }}-linux.AppImage
          asset_name: xtend-${{ env.VERSION }}-linux.AppImage
          asset_content_type: application/octet-stream

      - name: Upload Linux Debian package
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: xtend-${{ env.VERSION }}-linux.deb
          asset_name: xtend-${{ env.VERSION }}-linux.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Linux tar.gz archive
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: xtend-${{ env.VERSION }}-linux.tar.gz
          asset_name: xtend-${{ env.VERSION }}-linux.tar.gz
          asset_content_type: application/tar+gzip # ensure correct content type&#8203;:contentReference[oaicite:4]{index=4}

      - name: Upload Windows portable EXE
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: xtend-${{ env.VERSION }}-windows.exe
          asset_name: xtend-${{ env.VERSION }}-windows.exe
          asset_content_type: application/octet-stream

      - name: Upload Windows installer EXE
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: xtend-${{ env.VERSION }}-windows-installer.exe
          asset_name: xtend-${{ env.VERSION }}-windows-installer.exe
          asset_content_type: application/octet-stream

      - name: Upload macOS .dmg installer
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: xtend-${{ env.VERSION }}-macos.dmg
          asset_name: xtend-${{ env.VERSION }}-macos.dmg
          asset_content_type: application/x-apple-diskimage

      - name: Upload macOS .app bundle (zipped)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: xtend-${{ env.VERSION }}-macos.app.zip
          asset_name: xtend-${{ env.VERSION }}-macos.app.zip
          asset_content_type: application/zip
