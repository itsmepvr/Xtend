name: Release
permissions:
  contents: write # allow creating releases
on:
  push:
    tags:
      - "v*" # triggers on new tag like v1.0.0

jobs:
  # **Linux Build Job** – builds AppImage, .deb, and tar.gz on Ubuntu 18.04
  build_linux:
    runs-on: ubuntu-22.04
    env:
      DISPLAY: ":0"
      QT_DEBUG_PLUGINS: 1
      VERSION: ${{ github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build in Docker with proper permissions
        run: |
          docker run --rm \
            -e VERSION="${VERSION/v/}" \
            -v "${{ github.workspace }}":/src \
            -w /src \
            ubuntu:18.04 \
            bash -lc "
              set -ex
              apt-get update
              DEBIAN_FRONTEND=noninteractive apt-get install -y \
                python3-pip python3-pyqt5 python3-pyqt5.qtwebengine \
                libxcb-xinerama0 libgl1 libnss3 libxrender1 libxcomposite1 \
                libxslt1.1 libgconf-2-4 libasound2 libdbus-1-3 upx

              # Create build directory with proper permissions
              mkdir -p /src/dist
              chown -R $(id -u):$(id -g) /src

              pip3 install --upgrade pip
              pip3 install pyinstaller==5.13.0 PyQt5==5.15.9 pillow

              # Build as regular user
              sudo -u $(id -un) \
                pyinstaller --onefile --windowed \
                  --name xtend \
                  --icon src/xtend/resources/icon.png \
                  --collect-all PyQt5 \
                  --collect-all PyQt5.QtWebEngine \
                  --collect-binaries QtWebEngineProcess \
                  --hidden-import PyQt5.QtWebEngineWidgets \
                  --hidden-import PyQt5.QtPrintSupport \
                  --distpath /src/dist \
                  --workpath /src/build \
                  src/xtend/cli.py

              # Apply UPX compression
              [ -f /src/dist/xtend ] && upx --lzma --best /src/dist/xtend || true
            "

      # Remaining steps (AppImage packaging, DEB creation, etc.) remain unchanged
      - name: Prepare AppImage tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            fuse libgtk-3-0 libnotify4 libxss1 libxtst6 xdg-utils \
            libgl1-mesa-glx libvulkan1

          wget -qO linuxdeploy \
            https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget -qO linuxdeploy-plugin-qt \
            https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x linuxdeploy*

      - name: Create AppImage
        run: |
          mkdir -p AppDir/usr/{bin,lib,share/icons/hicolor/256x256/apps}

          cp dist/xtend AppDir/usr/bin/
          cp src/xtend/resources/icon.png AppDir/usr/share/icons/hicolor/256x256/apps/

          cat > AppDir/xtend.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=Xtend
          Exec=xtend
          Icon=xtend
          Comment=Screen Management Tool
          Categories=Utility;
          Terminal=false
          EOF

          ./linuxdeploy \
            --appdir AppDir \
            --plugin qt \
            --output appimage \
            --desktop-file AppDir/xtend.desktop \
            --icon-file AppDir/usr/share/icons/hicolor/256x256/apps/icon.png

          mv Xtend*.AppImage "xtend-${VERSION}-linux.AppImage"

      - name: Create Debian package
        run: |
          mkdir -p pkg/DEBIAN pkg/usr/{bin,share/{applications,icons/hicolor/256x256/apps}}

          cp dist/xtend pkg/usr/bin/
          cp src/xtend/resources/icon.png pkg/usr/share/icons/hicolor/256x256/apps/

          cat > pkg/usr/share/applications/xtend.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=Xtend
          Exec=xtend
          Icon=xtend
          Comment=Screen Management Tool
          Categories=Utility;
          Terminal=false
          EOF

          cat > pkg/DEBIAN/control << EOF
          Package: xtend
          Version: ${VERSION/v/}
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: Your Name <you@example.com>
          Depends: libxcb-xinerama0, libgl1, libnss3, libxcomposite1, libxslt1.1, libgconf-2-4, libasound2
          Description: Screen Management Tool
          EOF

          dpkg-deb --build pkg "xtend-${VERSION}-linux.deb"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux_builds
          path: |
            xtend-${{ env.VERSION }}-linux.AppImage
            xtend-${{ env.VERSION }}-linux.deb

  # **Windows Build Job** – builds one-file exe and NSIS installer on Windows
  # build_windows:
  #   runs-on: windows-latest
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v3

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.x"

  #     - name: Install Windows build dependencies
  #       shell: powershell
  #       run: |
  #         choco install -y nsis upx
  #         python -m pip install --upgrade pip
  #         pip install pyinstaller PyQt5

  #     - name: Extract version
  #       shell: bash
  #       run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

  #     - name: Build Windows executable with PyInstaller
  #       shell: cmd
  #       run: pyinstaller --onefile --windowed --name xtend --icon src\xtend\resources\icon.ico src\xtend\cli.py

  #     - name: Compress executable with UPX
  #       shell: cmd
  #       run: upx --force -9 dist\xtend.exe || echo "UPX compression failed, continuing without it"

  #     - name: Generate NSIS Installer
  #       shell: cmd
  #       run: |
  #         makensis /DVERSION=%VERSION% windows\xtend.nsi

  #     - name: Move & rename portable EXE to workspace root
  #       shell: cmd
  #       run: move /Y dist\xtend.exe xtend-%VERSION%-windows.exe

  #     - name: Upload Windows artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: windows_artifacts
  #         path: |
  #           xtend-${{ env.VERSION }}-windows.exe
  #           xtend-${{ env.VERSION }}-windows-installer.exe

  # **macOS Build Job** – builds .app bundle and .dmg on macOS 12 (Monterey)
  # build_macos:
  #   runs-on: macos-latest

  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v3

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.x"

  #     - name: Install macOS build dependencies
  #       run: brew install upx

  #     - name: Install Python requirements
  #       run: |
  #         pip install --upgrade pip
  #         pip install pyinstaller PyQt5 pillow   # ← added pillow

  #     - name: Extract version
  #       shell: bash
  #       run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

  #     - name: Build macOS app with PyInstaller
  #       run: |
  #         pyinstaller --onefile --windowed --name Xtend \
  #           --icon src/xtend/resources/icon.png \
  #           src/xtend/cli.py

  #     - name: Compress macOS binary with UPX
  #       run: |
  #         upx --force -9 dist/Xtend.app/Contents/MacOS/Xtend \
  #           || echo "UPX compression failed, continuing without it"

  #     - name: Package macOS artifacts (.app and .dmg)
  #       run: |
  #         hdiutil create -volname "Xtend" \
  #           -srcfolder "dist/Xtend.app" \
  #           -ov -format UDZO "xtend-${VERSION}-macos.dmg"
  #         ditto -c -k --sequesterRsrc --keepParent \
  #           "dist/Xtend.app" "xtend-${VERSION}-macos.app.zip"

  #     - name: Upload macOS artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: macos_artifacts
  #         path: |
  #           xtend-${{ env.VERSION }}-macos.dmg
  #           xtend-${{ env.VERSION }}-macos.app.zip

  # **Release Job** – creates a draft GitHub Release and attaches all artifacts
  create_release:
    runs-on: ubuntu-latest
    # needs: [build_linux, build_windows, build_macos]
    needs: [build_linux]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux_artifacts

      # - name: Download Windows artifacts
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: windows_artifacts

      # - name: Download macOS artifacts
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: macos_artifacts

      - name: Extract version (for release metadata)
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Create Draft Release
        id: release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: true
          prerelease: false

      - name: Upload Linux AppImage
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: xtend-${{ env.VERSION }}-linux.AppImage
          asset_name: xtend-${{ env.VERSION }}-linux.AppImage
          asset_content_type: application/octet-stream

      - name: Upload Linux Debian package
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: xtend-${{ env.VERSION }}-linux.deb
          asset_name: xtend-${{ env.VERSION }}-linux.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Linux tar.gz archive
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: xtend-${{ env.VERSION }}-linux.tar.gz
          asset_name: xtend-${{ env.VERSION }}-linux.tar.gz
          asset_content_type: application/tar+gzip

      # - name: Upload Windows portable EXE
      #   uses: actions/upload-release-asset@v1
      #   with:
      #     upload_url: ${{ steps.release.outputs.upload_url }}
      #     asset_path: xtend-${{ env.VERSION }}-windows.exe
      #     asset_name: xtend-${{ env.VERSION }}-windows.exe
      #     asset_content_type: application/octet-stream

      # - name: Upload Windows installer EXE
      #   uses: actions/upload-release-asset@v1
      #   with:
      #     upload_url: ${{ steps.release.outputs.upload_url }}
      #     asset_path: xtend-${{ env.VERSION }}-windows-installer.exe
      #     asset_name: xtend-${{ env.VERSION }}-windows-installer.exe
      #     asset_content_type: application/octet-stream

      # - name: Upload macOS .dmg installer
      #   uses: actions/upload-release-asset@v1
      #   with:
      #     upload_url: ${{ steps.release.outputs.upload_url }}
      #     asset_path: xtend-${{ env.VERSION }}-macos.dmg
      #     asset_name: xtend-${{ env.VERSION }}-macos.dmg
      #     asset_content_type: application/x-apple-diskimage

      # - name: Upload macOS .app bundle (zipped)
      #   uses: actions/upload-release-asset@v1
      #   with:
      #     upload_url: ${{ steps.release.outputs.upload_url }}
      #     asset_path: xtend-${{ env.VERSION }}-macos.app.zip
      #     asset_name: xtend-${{ env.VERSION }}-macos.app.zip
      #     asset_content_type: application/zip
